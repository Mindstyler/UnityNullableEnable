#nullable enable

using System.IO;
using UnityEditor;
using UnityEngine;

namespace Mindstyler.Utilities
{
    /// <summary>
    /// Automatically enable or disable Nullable Reference Types project wide.
    /// </summary>
    [InitializeOnLoad]
    internal static class NullableReferenceTypesSettings
    {
        internal const string SessionStateKey = "NRTSettingsApplied";

        private const string Preprocessor = "#nullable enable // autogenerated";
        private const string MenuName = "NullableReferenceTypes/Enabled";
        private const string EditorPrefsKey = "EnableNRTs";

        static NullableReferenceTypesSettings()
        {
            if (!SessionState.GetBool(SessionStateKey, false))
            {
                bool enableNRTs = EditorPrefs.GetBool(EditorPrefsKey, false);

                Menu.SetChecked(MenuName, enableNRTs);
                ModifyScripts(enableNRTs);
                SessionState.SetBool(SessionStateKey, true);
            }
        }

        /// <summary>
        /// Modify all script files to add or remove the nullable preprocessor.
        /// </summary>
        /// <param name="enableNullable">Should the nullable preprocessor be added or removed from all script files.</param>
        private static void ModifyScripts(bool enableNullable)
        {
            foreach (string filePath in Directory.EnumerateFiles(Application.dataPath, "*.cs", SearchOption.AllDirectories))
            {
                string code = File.ReadAllText(filePath).Replace("\r\n", "\n");

                bool nullableDefined = code.StartsWith(Preprocessor);

                if (enableNullable)
                {
                    if (!nullableDefined)
                    {
                        File.WriteAllText(filePath, Preprocessor + "\n\n" + code);
                    }
                }
                else
                {
                    if (nullableDefined)
                    {
                        File.WriteAllText(filePath, code.Substring(Preprocessor.Length + 2));
                    }
                }
            }
        }

        /// <summary>
        /// Provides a menu in Unity to allow toggling of Nullable Reference Types.
        /// </summary>
        [MenuItem(MenuName)]
        private static void ToggleNullableReferenceTypes()
        {
            bool toggled = !EditorPrefs.GetBool(EditorPrefsKey);

            ModifyScripts(toggled);

            EditorPrefs.SetBool(EditorPrefsKey, toggled);
            Menu.SetChecked(MenuName, toggled);
        }
    }

    /// <summary>
    /// Postprocessor for Nullable Reference Types settings.
    /// </summary>
    internal sealed class ScriptCreationHook : AssetModificationProcessor
    {
        /// <summary>
        /// Unity callback on asset creation.
        /// Resets SessionState for Nullable Reference Types on creation of .cs files to apply NRT settings again.
        /// </summary>
        /// <param name="assetName">The name of the newly created Asset.</param>
#pragma warning disable IDE0051 // Remove unused private members
        private static void OnWillCreateAsset(string assetName)
#pragma warning restore IDE0051 // Remove unused private members
        {
            if (assetName.EndsWith(".cs"))
            {
                SessionState.SetBool(NullableReferenceTypesSettings.SessionStateKey, false);
            }
        }
    }
}
